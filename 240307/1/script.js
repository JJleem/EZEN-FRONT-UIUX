// 서버&통신
// 1. 왜필ㅇ한가? 이유 설득 & 합리적
// html,css,js => 기초문법 / 예제
// TodoList =>
// 1) 기본 레이아웃 정렬
// 2) DOM 사용자 데이터 값을 수신
// 3) 의도한 화면 영역에 출력 이벤트
// 4) 사용자 수신 받은 데이터 저장 기능

//만약, 용량 큰 데이터를 사용자 받아서 처리해야하는 상황이라면?
// html & css
// 어딘가에 문안 & 이미지 & 동영상 호스팅 => 가져다가쓸순없나?

// 서버 : 사용자가 입력한 데이터를 보관.처리하는 웹 상의 가상 공간

// 프론트엔드 개발자 : 사용자 데이터 + UI 레이아웃 설계 구현
// 풀스택개발 || 백엔드 개발자 서버구현 (*구축) + 데이터 비관계형 & 관계형 데이터 베이스 설계 => 데이터를 사용할수 있도록 만드는 작업

// input => id & pw
// 서버 통신은 "규약"이 존재 !! => 프로토콜
// hyper text transfer protocol = http
// http 와 https 의 차이?
// s : security : 보안 => 보안패치 설치 !!

// method : get => 서버에 특정 데이터를 요청하겠다는 의미
// method : post => 서버에 특정 데이터를 주겠다는 의미 !!

// 200 : 서버에 정상적으로 자료를 요청했고, 서버 역시 정상적으로 자료를 전송해주었다는 의미
// 404 : 서버에 어떤 데이터를 요청했는데 , 그데이터를 찾지 못할 때 서버가 알려주는 번호!
// 400 || 401 : 정상적으로 요청, 권한이없는..
// 403 : 권한요청이 없음에도 지속적으로 페이지에 접속하고자 할 때
// 503 : 정상적으로 서버에 데이터를 요청했으나, 서버가 정상적으로 작동할수 없음을 알려주는 번호 !! => 서버가 다운되었다

// JSON : Javascript Object Notation
// 자바스크립트 객체 표기법

const obj = {
  title: "title",
  price: 15000,
};
// 만약!! JS언어를 가지고 , 서버구현 & 데이터베이스를 구축할수있다면 백엔드개발자랑 연봉차이가 있을수가없음.
// 애초에 JS 는 웹브라우저에서만 사용할수있도록 만든 한정적인 제약 언어
// 서버 구현 & 저장데이터를 관리할수있도록 해주는 언어 Java & C++ & C# & C 언어들이 전통적으로 서버에서 사용할 수 있는 언어들!!
// UI 영역 각광을 받은지 얼마안됨!!

const student = {
  name: "영심이",
  major: "체육교육",
  grade: 3,
};
const json = JSON.stringify(student);
console.log(student);
console.log(json);

const json_obj = JSON.parse(student_json);

// 서버와 우리가 통신
// 서버와 클라이언트가 통신규약 아래에서 통신을한다!

//AJAX
// AJAX = 클라이언트 & 서버간 통신을 할 수 있도록하는 통신기법
// Asynchronous Javascript And XML 의 약자
// Asynchronous = 비동기
// Javascript = 웹 사용가능 자바스크립트 언어
// JSON : 언어를 의미하는것이 아니라 ,자바스크립트언어 <=> 서버가 이해할수있도록 변환시켜주는 표기법/ 서버에서 가져온 데이터 <=> 웹 브라우저가 이해할 수 있도록 변환시켜주는 표기법
// XML : 과거 서버에서 실직적으로 사용할 수 있는 언어
